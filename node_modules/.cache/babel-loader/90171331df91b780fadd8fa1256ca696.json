{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"D:\\\\Files\\\\DBOT\\\\src\\\\routes\\\\limitorderbuy\\\\LimitOrderBuyComponent.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport '../../components/App.css';\nimport { GetWeb3 } from '../../store/web3';\n\nrequire('dotenv').config();\n\nvar Web3 = require('web3');\n\nvar _require = require('@uniswap/sdk'),\n    ChainId = _require.ChainId,\n    Fetcher = _require.Fetcher,\n    WETH = _require.WETH,\n    Route = _require.Route,\n    Trade = _require.Trade,\n    TokenAmount = _require.TokenAmount,\n    TradeType = _require.TradeType,\n    Percent = _require.Percent,\n    Pair = _require.Pair,\n    Token = _require.Token;\n\nvar ethers = require('ethers');\n\nvar price = require('crypto-price');\n\nvar web3;\nvar web3HD;\nvar token;\nvar route;\nvar weth;\nvar provider;\nvar signer;\nvar uniswap;\nvar tokenContract;\nvar tokenPrice;\nvar priceMonitor;\nvar ethUSDPrice;\nvar cryptoPrice;\nvar ethPerToken;\nvar monitorLimitPrice = false;\nvar chainId = ChainId.MAINNET;\nvar EXCHANGE_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';\nvar TOKEN_ADDRESS;\nvar BUY_PRICE;\nvar ETH_AMOUNT;\n\nvar LimitOrderBuyComponent = /*#__PURE__*/function (_Component) {\n  _inherits(LimitOrderBuyComponent, _Component);\n\n  var _super = _createSuper(LimitOrderBuyComponent);\n\n  function LimitOrderBuyComponent(props) {\n    var _this;\n\n    _classCallCheck(this, LimitOrderBuyComponent);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      account: '',\n      gasprice: 0,\n      tokenAddress: '',\n      buyprice: 0,\n      ethAmount: 0,\n      marketPrice: 0,\n      botstatus: '',\n      transactions: []\n    };\n    _this.tokenAddressAdded = _this.tokenAddressAdded.bind(_assertThisInitialized(_this));\n    _this.monitorTokenPrice = _this.monitorTokenPrice.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(LimitOrderBuyComponent, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.loadblockchain();\n    }\n  }, {\n    key: \"loadblockchain\",\n    value: function () {\n      var _loadblockchain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var accounts, privateKey;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return GetWeb3();\n\n              case 2:\n                window.web3 = _context.sent;\n                _context.next = 5;\n                return window.web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                console.log(this.state.account); // WEB3 CONFIG\n\n                web3 = new Web3(process.env.REACT_APP_RPC_WEB_SCOKET);\n                web3HD = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_RPC_HTTP));\n                provider = new ethers.getDefaultProvider(process.env.REACT_APP_RPC_HTTP);\n                privateKey = new Buffer.from(process.env.REACT_APP_PRIVATE_KEY, \"hex\");\n                signer = new ethers.Wallet(privateKey, provider);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadblockchain() {\n        return _loadblockchain.apply(this, arguments);\n      }\n\n      return loadblockchain;\n    }()\n  }, {\n    key: \"tokenAddressAdded\",\n    value: function () {\n      var _tokenAddressAdded = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tokenAddress) {\n        var pair;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                TOKEN_ADDRESS = tokenAddress; // declare the token contract interfaces\n\n                tokenContract = new ethers.Contract(TOKEN_ADDRESS, ['function balanceOf(address owner) external view returns (uint)', 'function decimals() external view returns (uint8)', 'function approve(address spender, uint value) external returns (bool)'], signer); // declare the Uniswap contract interface\n\n                uniswap = new ethers.Contract(EXCHANGE_ADDRESS, ['function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts)', 'function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)'], signer);\n                _context2.next = 5;\n                return Fetcher.fetchTokenData(chainId, TOKEN_ADDRESS);\n\n              case 5:\n                token = _context2.sent;\n                weth = WETH[chainId];\n                _context2.next = 9;\n                return Fetcher.fetchPairData(token, weth, provider);\n\n              case 9:\n                pair = _context2.sent;\n                route = new Route([pair], weth);\n                _context2.next = 13;\n                return price.getCryptoPrice('USD', 'ETH');\n\n              case 13:\n                cryptoPrice = _context2.sent;\n                ethUSDPrice = cryptoPrice.price;\n                ethPerToken = 1 / parseFloat(route.midPrice.toSignificant(6));\n                tokenPrice = ethUSDPrice * ethPerToken;\n                this.setState({\n                  marketPrice: tokenPrice\n                });\n\n              case 18:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function tokenAddressAdded(_x) {\n        return _tokenAddressAdded.apply(this, arguments);\n      }\n\n      return tokenAddressAdded;\n    }()\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var POLLING_INTERVAL;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                BUY_PRICE = this.state.buyprice;\n                ETH_AMOUNT = this.state.ethAmount;\n                POLLING_INTERVAL = 1000;\n                priceMonitor = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return _this2.monitorTokenPrice();\n\n                        case 2:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })), POLLING_INTERVAL);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"monitorTokenPrice\",\n    value: function () {\n      var _monitorTokenPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _ethAmount, trade, slippageTolerance, amountOutMin, amountOutMinHex, path, deadline, inputAmount, deadlineHex, inputAmountHex, gasPrice, tx, transactionReceipt;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!monitorLimitPrice) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                monitorLimitPrice = true;\n                _context5.prev = 3;\n                _context5.next = 6;\n                return price.getCryptoPrice('USD', 'ETH');\n\n              case 6:\n                cryptoPrice = _context5.sent;\n                ethUSDPrice = cryptoPrice.price;\n                ethPerToken = 1 / parseFloat(route.midPrice.toSignificant(6));\n                tokenPrice = ethUSDPrice * ethPerToken;\n                this.setState({\n                  marketPrice: tokenPrice\n                });\n                console.log('limit buy price : ', BUY_PRICE);\n                console.log('token price : ', tokenPrice);\n\n                if (!(tokenPrice <= BUY_PRICE)) {\n                  _context5.next = 37;\n                  break;\n                }\n\n                console.log('place buy order..');\n                _ethAmount = ethers.utils.parseEther(ETH_AMOUNT);\n                trade = new Trade(route, new TokenAmount(weth, _ethAmount), TradeType.EXACT_INPUT);\n                slippageTolerance = new Percent('15000', '1000');\n                amountOutMin = trade.minimumAmountOut(slippageTolerance).raw;\n                amountOutMinHex = ethers.BigNumber.from(amountOutMin.toString()).toHexString();\n                path = [weth.address, token.address];\n                deadline = Math.floor(Date.now() / 1000) + 60 * 20;\n                inputAmount = trade.inputAmount.raw;\n                deadlineHex = ethers.BigNumber.from(deadline.toString()).toHexString();\n                inputAmountHex = ethers.BigNumber.from(inputAmount.toString()).toHexString();\n                _context5.next = 27;\n                return web3HD.eth.getGasPrice();\n\n              case 27:\n                gasPrice = _context5.sent;\n                _context5.next = 30;\n                return uniswap.swapExactETHForTokens(amountOutMinHex, path, this.state.account, deadlineHex, {\n                  value: inputAmountHex,\n                  gasPrice: ethers.BigNumber.from(gasPrice).toHexString(),\n                  gasLimit: web3HD.utils.toHex(400000)\n                });\n\n              case 30:\n                tx = _context5.sent;\n                window.alert('limit order buy transaction : ' + tx.hash);\n\n              case 32:\n                _context5.next = 34;\n                return web3HD.eth.getTransactionReceipt(tx.hash);\n\n              case 34:\n                transactionReceipt = _context5.sent;\n\n              case 35:\n                if (transactionReceipt === null) {\n                  _context5.next = 32;\n                  break;\n                }\n\n              case 36:\n                clearInterval(priceMonitor);\n\n              case 37:\n                _context5.next = 45;\n                break;\n\n              case 39:\n                _context5.prev = 39;\n                _context5.t0 = _context5[\"catch\"](3);\n                console.error(_context5.t0);\n                monitorLimitPrice = false;\n                clearInterval(priceMonitor);\n                return _context5.abrupt(\"return\");\n\n              case 45:\n                monitorLimitPrice = false;\n\n              case 46:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[3, 39]]);\n      }));\n\n      function monitorTokenPrice() {\n        return _monitorTokenPrice.apply(this, arguments);\n      }\n\n      return monitorTokenPrice;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"mb-4\",\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n\n          _this3.start();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 24\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Token Address\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\")), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"form-control form-control-lg\",\n        type: \"text\",\n        value: this.state.value,\n        onChange: function onChange(event) {\n          _this3.setState({\n            tokenAddress: _this3.tokenAddress.value\n          });\n\n          _this3.tokenAddressAdded(_this3.tokenAddress.value);\n        },\n        ref: function ref(tokenAddress) {\n          _this3.tokenAddress = tokenAddress;\n        },\n        placeholder: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", this.state.tokenAddress)), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 24\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Limit Price (Buy)\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\")), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.value,\n        onChange: function onChange(event) {\n          _this3.setState({\n            buyprice: _this3.buyprice.value\n          });\n        },\n        ref: function ref(buyprice) {\n          _this3.buyprice = buyprice;\n        },\n        placeholder: \"0\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 24\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0ETH Amount\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\")), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.value,\n        onChange: function onChange(event) {\n          _this3.setState({\n            ethAmount: _this3.ethAmount.value\n          });\n        },\n        ref: function ref(ethAmount) {\n          _this3.ethAmount = ethAmount;\n        },\n        placeholder: \"0\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"float-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        variant: \"success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }\n      }, \"BUY\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Token Market Price ($) : \", this.state.marketPrice), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 18\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", this.state.botstatus))));\n    }\n  }]);\n\n  return LimitOrderBuyComponent;\n}(Component);\n\nexport default LimitOrderBuyComponent;","map":{"version":3,"sources":["D:/Files/DBOT/src/routes/limitorderbuy/LimitOrderBuyComponent.js"],"names":["React","Component","Button","GetWeb3","require","config","Web3","ChainId","Fetcher","WETH","Route","Trade","TokenAmount","TradeType","Percent","Pair","Token","ethers","price","web3","web3HD","token","route","weth","provider","signer","uniswap","tokenContract","tokenPrice","priceMonitor","ethUSDPrice","cryptoPrice","ethPerToken","monitorLimitPrice","chainId","MAINNET","EXCHANGE_ADDRESS","TOKEN_ADDRESS","BUY_PRICE","ETH_AMOUNT","LimitOrderBuyComponent","props","state","account","gasprice","tokenAddress","buyprice","ethAmount","marketPrice","botstatus","transactions","tokenAddressAdded","bind","monitorTokenPrice","loadblockchain","window","eth","getAccounts","accounts","setState","console","log","process","env","REACT_APP_RPC_WEB_SCOKET","providers","HttpProvider","REACT_APP_RPC_HTTP","getDefaultProvider","privateKey","Buffer","from","REACT_APP_PRIVATE_KEY","Wallet","Contract","fetchTokenData","fetchPairData","pair","getCryptoPrice","parseFloat","midPrice","toSignificant","POLLING_INTERVAL","setInterval","_ethAmount","utils","parseEther","trade","EXACT_INPUT","slippageTolerance","amountOutMin","minimumAmountOut","raw","amountOutMinHex","BigNumber","toString","toHexString","path","address","deadline","Math","floor","Date","now","inputAmount","deadlineHex","inputAmountHex","getGasPrice","gasPrice","swapExactETHForTokens","value","gasLimit","toHex","tx","alert","hash","getTransactionReceipt","transactionReceipt","clearInterval","error","event","preventDefault","start"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport '../../components/App.css';\nimport { GetWeb3 } from '../../store/web3';\nrequire('dotenv').config();\nconst Web3 = require('web3');\nconst { ChainId, Fetcher, WETH, Route, Trade, TokenAmount, TradeType, Percent, Pair, Token } = require('@uniswap/sdk');\nconst ethers = require('ethers');\nconst price = require('crypto-price');\n\nlet web3;\nlet web3HD;\nlet token;\nlet route;\nlet weth;\nlet provider;\nlet signer;\nlet uniswap;\nlet tokenContract;\nlet tokenPrice;\nlet priceMonitor;\nlet ethUSDPrice;\nlet cryptoPrice;\nlet ethPerToken;\nlet monitorLimitPrice = false;\nconst chainId = ChainId.MAINNET;\nconst EXCHANGE_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';\nlet TOKEN_ADDRESS;\nlet BUY_PRICE;\nlet ETH_AMOUNT;\n\nclass LimitOrderBuyComponent extends Component { \n    constructor(props){\n        super(props)\n        this.state = {\n            account: '',\n            gasprice: 0,\n            tokenAddress: '',\n            buyprice: 0,\n            ethAmount: 0,\n            marketPrice: 0,\n            botstatus: '',\n            transactions: []\n        }\n        this.tokenAddressAdded = this.tokenAddressAdded.bind(this);\n        this.monitorTokenPrice = this.monitorTokenPrice.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadblockchain()\n    }\n    \n    async loadblockchain() {\n        window.web3 = await GetWeb3();\n        const accounts = await window.web3.eth.getAccounts();\n        this.setState({account: accounts[0]});\n        console.log(this.state.account);\n        \n        // WEB3 CONFIG\n        web3 = new Web3(process.env.REACT_APP_RPC_WEB_SCOKET);\n        web3HD = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_RPC_HTTP));\n        provider = new ethers.getDefaultProvider(process.env.REACT_APP_RPC_HTTP);\n        const privateKey = new Buffer.from(process.env.REACT_APP_PRIVATE_KEY, \"hex\");\n        signer = new ethers.Wallet(privateKey, provider);\n    }\n\n    async tokenAddressAdded(tokenAddress){\n        TOKEN_ADDRESS = tokenAddress;\n        // declare the token contract interfaces\n        tokenContract = new ethers.Contract(\n          TOKEN_ADDRESS,\n          ['function balanceOf(address owner) external view returns (uint)',\n            'function decimals() external view returns (uint8)',\n            'function approve(address spender, uint value) external returns (bool)'],\n          signer\n        );\n        // declare the Uniswap contract interface\n        uniswap = new ethers.Contract(\n          EXCHANGE_ADDRESS,\n          ['function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts)',\n            'function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)'],\n          signer\n        );\n        token = await Fetcher.fetchTokenData(chainId, TOKEN_ADDRESS);\n        weth = WETH[chainId];\n        const pair = await Fetcher.fetchPairData(token, weth, provider);\n        route = new Route([pair], weth);\n\n        cryptoPrice = await price.getCryptoPrice('USD', 'ETH');\n        ethUSDPrice = cryptoPrice.price;\n        ethPerToken = 1 / parseFloat(route.midPrice.toSignificant(6));\n        tokenPrice = ethUSDPrice * ethPerToken;\n        this.setState({marketPrice: tokenPrice});\n    }\n\n    async start(){\n        BUY_PRICE = this.state.buyprice;\n        ETH_AMOUNT = this.state.ethAmount;\n\n        const POLLING_INTERVAL = 1000;\n        priceMonitor = setInterval(async () => { await this.monitorTokenPrice() }, POLLING_INTERVAL);\n    }\n\n    async monitorTokenPrice(){\n        if(monitorLimitPrice) {\n            return;\n        }\n        monitorLimitPrice = true;\n        \n        try {\n            cryptoPrice = await price.getCryptoPrice('USD', 'ETH');\n            ethUSDPrice = cryptoPrice.price;\n            ethPerToken = 1 / parseFloat(route.midPrice.toSignificant(6));\n            tokenPrice = ethUSDPrice * ethPerToken;\n            this.setState({marketPrice: tokenPrice});\n\n            console.log('limit buy price : ', BUY_PRICE);\n            console.log('token price : ', tokenPrice);\n            \n            if(tokenPrice <= BUY_PRICE){\n                console.log('place buy order..');\n                const _ethAmount = ethers.utils.parseEther(ETH_AMOUNT);\n                const trade = new Trade(route, new TokenAmount(weth, _ethAmount), TradeType.EXACT_INPUT);\n                \n                const slippageTolerance = new Percent('15000', '1000');\n                const amountOutMin = trade.minimumAmountOut(slippageTolerance).raw;\n                const amountOutMinHex = ethers.BigNumber.from(amountOutMin.toString()).toHexString();\n                const path = [weth.address, token.address];\n                const deadline = Math.floor(Date.now() / 1000) + 60 * 20;\n                const inputAmount = trade.inputAmount.raw;\n                const deadlineHex = ethers.BigNumber.from(deadline.toString()).toHexString();\n                const inputAmountHex = ethers.BigNumber.from(inputAmount.toString()).toHexString();\n                const gasPrice = await web3HD.eth.getGasPrice();\n\n                // do the swap\n                const tx = await uniswap.swapExactETHForTokens(\n                    amountOutMinHex,\n                    path,\n                    this.state.account,\n                    deadlineHex,\n                    { \n                        value: inputAmountHex, \n                        gasPrice: ethers.BigNumber.from(gasPrice).toHexString(),\n                        gasLimit: web3HD.utils.toHex(400000)\n                    }\n                );\n                window.alert('limit order buy transaction : ' +  tx.hash);\n                let transactionReceipt;\n                do {\n                    transactionReceipt = await web3HD.eth.getTransactionReceipt(tx.hash);\n                }\n                while(transactionReceipt === null);\n                clearInterval(priceMonitor);\n            }\n        } catch (error) {\n            console.error(error);\n            monitorLimitPrice = false;\n            clearInterval(priceMonitor);\n            return\n        }\n        monitorLimitPrice = false;\n    }\n\n    render() {\n        return (\n        <form className=\"mb-4\" onSubmit={(event) => {\n            event.preventDefault()\n            this.start()\n          }}>\n        <div>\n            <div>\n                <label><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></label>\n                <input\n                className=\"form-control form-control-lg\"\n                type=\"text\"\n                value={this.state.value}\n                onChange={(event) => {\n                    this.setState({tokenAddress: this.tokenAddress.value})\n                    this.tokenAddressAdded(this.tokenAddress.value)\n                }}\n                ref={(tokenAddress) => { this.tokenAddress = tokenAddress }}\n                placeholder=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                required />\n                <br />\n                <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{this.state.tokenAddress}</span>\n            </div>\n            <br />\n            <div>\n                <label><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Limit Price (Buy)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></label>\n                <input\n                type=\"text\"\n                value={this.state.value}\n                onChange={(event) => {\n                    this.setState({buyprice: this.buyprice.value})\n                }}\n                ref={(buyprice) => { this.buyprice = buyprice }}\n                placeholder=\"0\"\n                required\n                />\n            </div>\n            <br />\n            <div>\n                <label><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ETH Amount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></label>\n                <input\n                type=\"text\"\n                value={this.state.value}\n                onChange={(event) => {\n                    this.setState({ethAmount: this.ethAmount.value})\n                }}\n                ref={(ethAmount) => { this.ethAmount = ethAmount }}\n                placeholder=\"0\"\n                required\n                />\n            </div>\n            <br />\n            <br />\n            <div>\n                <span className=\"float-center\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                    <Button type=\"submit\" variant=\"success\">BUY</Button>\n                </span>\n            </div>\n            <br />\n            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token Market Price ($) : {this.state.marketPrice}</span>\n            <div><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{this.state.botstatus}</b></div>\n        </div>\n        </form>\n        )\n    }\n}\n\nexport default LimitOrderBuyComponent;\n"]},"metadata":{},"sourceType":"module"}