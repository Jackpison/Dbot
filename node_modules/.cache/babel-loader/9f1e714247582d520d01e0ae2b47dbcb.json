{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\Files\\\\DBOT\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"D:\\\\Files\\\\DBOT\\\\src\\\\routes\\\\limitordersell\\\\LimitOrderSellComponent.js\";\nimport React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport '../../components/App.css';\nimport { GetWeb3 } from '../../store/web3';\n\nrequire('dotenv').config();\n\nvar Web3 = require('web3');\n\nvar _require = require('@uniswap/sdk'),\n    ChainId = _require.ChainId,\n    Fetcher = _require.Fetcher,\n    WETH = _require.WETH,\n    Route = _require.Route,\n    Trade = _require.Trade,\n    TokenAmount = _require.TokenAmount,\n    TradeType = _require.TradeType,\n    Percent = _require.Percent,\n    Pair = _require.Pair,\n    Token = _require.Token;\n\nvar ethers = require('ethers');\n\nvar price = require('crypto-price');\n\nvar web3;\nvar web3HD;\nvar token;\nvar route;\nvar weth;\nvar provider;\nvar signer;\nvar uniswap;\nvar tokenContract;\nvar tokenPrice;\nvar priceMonitor;\nvar ethUSDPrice;\nvar cryptoPrice;\nvar ethPerToken;\nvar decimals;\nvar monitorLimitPrice = false;\nvar chainId = ChainId.MAINNET;\nvar EXCHANGE_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';\nvar TOKEN_ADDRESS;\nvar SELL_PRICE;\nvar TOKEN_AMOUNT;\n\nvar LimitOrderSellComponent = /*#__PURE__*/function (_Component) {\n  _inherits(LimitOrderSellComponent, _Component);\n\n  var _super = _createSuper(LimitOrderSellComponent);\n\n  function LimitOrderSellComponent(props) {\n    var _this;\n\n    _classCallCheck(this, LimitOrderSellComponent);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      account: '',\n      gasprice: 0,\n      tokenAddress: '',\n      sellprice: 0,\n      tokenAmount: 0,\n      marketPrice: 0,\n      tokenBalance: 0,\n      botstatus: '',\n      transactions: []\n    };\n    _this.tokenAddressAdded = _this.tokenAddressAdded.bind(_assertThisInitialized(_this));\n    _this.monitorTokenPrice = _this.monitorTokenPrice.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(LimitOrderSellComponent, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.loadblockchain();\n    }\n  }, {\n    key: \"loadblockchain\",\n    value: function () {\n      var _loadblockchain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var accounts, privateKey;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return GetWeb3();\n\n              case 2:\n                window.web3 = _context.sent;\n                _context.next = 5;\n                return window.web3.eth.getAccounts();\n\n              case 5:\n                accounts = _context.sent;\n                this.setState({\n                  account: accounts[0]\n                });\n                console.log(this.state.account); // WEB3 CONFIG\n\n                web3 = new Web3(process.env.REACT_APP_RPC_WEB_SCOKET);\n                web3HD = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_RPC_HTTP));\n                provider = new ethers.getDefaultProvider(process.env.REACT_APP_RPC_HTTP);\n                privateKey = new Buffer.from(process.env.REACT_APP_PRIVATE_KEY, \"hex\");\n                signer = new ethers.Wallet(privateKey, provider);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadblockchain() {\n        return _loadblockchain.apply(this, arguments);\n      }\n\n      return loadblockchain;\n    }()\n  }, {\n    key: \"tokenAddressAdded\",\n    value: function () {\n      var _tokenAddressAdded = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tokenAddress) {\n        var pair, tbalance, balance;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                TOKEN_ADDRESS = tokenAddress; // declare the token contract interfaces\n\n                tokenContract = new ethers.Contract(TOKEN_ADDRESS, ['function balanceOf(address owner) external view returns (uint)', 'function decimals() external view returns (uint8)', 'function approve(address spender, uint value) external returns (bool)'], signer); // declare the Uniswap contract interface\n\n                uniswap = new ethers.Contract(EXCHANGE_ADDRESS, ['function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts)', 'function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)'], signer);\n                _context2.next = 5;\n                return Fetcher.fetchTokenData(chainId, TOKEN_ADDRESS);\n\n              case 5:\n                token = _context2.sent;\n                weth = WETH[chainId];\n                _context2.next = 9;\n                return Fetcher.fetchPairData(token, weth, provider);\n\n              case 9:\n                pair = _context2.sent;\n                route = new Route([pair], weth);\n                _context2.next = 13;\n                return tokenContract.balanceOf(this.state.account);\n\n              case 13:\n                tbalance = _context2.sent;\n                _context2.next = 16;\n                return tokenContract.decimals();\n\n              case 16:\n                decimals = _context2.sent;\n                balance = ethers.utils.formatUnits(tbalance.toString(), decimals);\n                this.setState({\n                  tokenBalance: balance.toString()\n                });\n                _context2.next = 21;\n                return price.getCryptoPrice('USD', 'ETH');\n\n              case 21:\n                cryptoPrice = _context2.sent;\n                ethUSDPrice = cryptoPrice.price;\n                ethPerToken = 1 / parseFloat(route.midPrice.toSignificant(6));\n                tokenPrice = ethUSDPrice * ethPerToken;\n                this.setState({\n                  marketPrice: tokenPrice\n                });\n\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function tokenAddressAdded(_x) {\n        return _tokenAddressAdded.apply(this, arguments);\n      }\n\n      return tokenAddressAdded;\n    }()\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var POLLING_INTERVAL;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                SELL_PRICE = this.state.sellprice;\n                TOKEN_AMOUNT = this.state.tokenAmount;\n                POLLING_INTERVAL = 1000;\n                priceMonitor = setInterval( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return _this2.monitorTokenPrice();\n\n                        case 2:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })), POLLING_INTERVAL);\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"monitorTokenPrice\",\n    value: function () {\n      var _monitorTokenPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var amountIn, amountInHex, amountOutMin, amountOutMinHex, path, deadline, deadlineHex, gasPrice, tx, transactionReceipt;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!monitorLimitPrice) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                monitorLimitPrice = true;\n                _context5.prev = 3;\n                _context5.next = 6;\n                return price.getCryptoPrice('USD', 'ETH');\n\n              case 6:\n                cryptoPrice = _context5.sent;\n                ethUSDPrice = cryptoPrice.price;\n                ethPerToken = 1 / parseFloat(route.midPrice.toSignificant(6));\n                tokenPrice = ethUSDPrice * ethPerToken;\n                this.setState({\n                  marketPrice: tokenPrice\n                });\n                console.log('limit sell price : ', SELL_PRICE);\n                console.log('token price : ', tokenPrice);\n\n                if (!(tokenPrice >= SELL_PRICE)) {\n                  _context5.next = 34;\n                  break;\n                }\n\n                console.log('place sell order..');\n                amountIn = ethers.utils.parseUnits(TOKEN_AMOUNT.toString());\n                amountInHex = ethers.BigNumber.from(amountIn.toString()).toHexString();\n                amountOutMin = 0.0002 * Math.pow(10, decimals);\n                amountOutMinHex = ethers.BigNumber.from(amountOutMin.toString()).toHexString();\n                path = [token.address, weth.address];\n                deadline = Math.floor(Date.now() / 1000) + 60 * 20;\n                deadlineHex = ethers.BigNumber.from(deadline.toString()).toHexString();\n                _context5.next = 24;\n                return web3HD.eth.getGasPrice();\n\n              case 24:\n                gasPrice = _context5.sent;\n                _context5.next = 27;\n                return uniswap.swapExactTokensForETH(amountInHex, amountOutMinHex, path, this.state.account, deadlineHex, {\n                  gasPrice: ethers.BigNumber.from(gasPrice).toHexString(),\n                  gasLimit: web3HD.utils.toHex(400000)\n                });\n\n              case 27:\n                tx = _context5.sent;\n                window.alert('limit order sell transaction : ' + tx.hash);\n\n              case 29:\n                _context5.next = 31;\n                return web3HD.eth.getTransactionReceipt(tx.hash);\n\n              case 31:\n                transactionReceipt = _context5.sent;\n\n              case 32:\n                if (transactionReceipt === null) {\n                  _context5.next = 29;\n                  break;\n                }\n\n              case 33:\n                clearInterval(priceMonitor);\n\n              case 34:\n                _context5.next = 42;\n                break;\n\n              case 36:\n                _context5.prev = 36;\n                _context5.t0 = _context5[\"catch\"](3);\n                console.error(_context5.t0);\n                monitorLimitPrice = false;\n                clearInterval(priceMonitor);\n                return _context5.abrupt(\"return\");\n\n              case 42:\n                monitorLimitPrice = false;\n\n              case 43:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[3, 36]]);\n      }));\n\n      function monitorTokenPrice() {\n        return _monitorTokenPrice.apply(this, arguments);\n      }\n\n      return monitorTokenPrice;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(\"form\", {\n        className: \"mb-4\",\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n\n          _this3.start();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 24\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Token Address\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\")), /*#__PURE__*/React.createElement(\"input\", {\n        className: \"form-control form-control-lg\",\n        type: \"text\",\n        value: this.state.value,\n        onChange: function onChange(event) {\n          _this3.setState({\n            tokenAddress: _this3.tokenAddress.value\n          });\n\n          _this3.tokenAddressAdded(_this3.tokenAddress.value);\n        },\n        ref: function ref(tokenAddress) {\n          _this3.tokenAddress = tokenAddress;\n        },\n        placeholder: \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", this.state.tokenAddress)), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 24\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Limit Price (Sell)\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\")), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.value,\n        onChange: function onChange(event) {\n          _this3.setState({\n            sellprice: _this3.sellprice.value\n          });\n        },\n        ref: function ref(sellprice) {\n          _this3.sellprice = sellprice;\n        },\n        placeholder: \"0\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 24\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Token Amount\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\")), /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        value: this.state.value,\n        onChange: function onChange(event) {\n          _this3.setState({\n            tokenAmount: _this3.tokenAmount.value\n          });\n        },\n        ref: function ref(tokenAmount) {\n          _this3.tokenAmount = tokenAmount;\n        },\n        placeholder: \"0\",\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }\n      })), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        className: \"float-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 17\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/React.createElement(Button, {\n        type: \"submit\",\n        variant: \"success\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }\n      }, \"SELL\"))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Token Balance : \", this.state.tokenBalance), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0Token Market Price ($) : \", this.state.marketPrice), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"b\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 18\n        }\n      }, \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", this.state.botstatus))));\n    }\n  }]);\n\n  return LimitOrderSellComponent;\n}(Component);\n\nexport default LimitOrderSellComponent;","map":{"version":3,"sources":["D:/Files/DBOT/src/routes/limitordersell/LimitOrderSellComponent.js"],"names":["React","Component","Button","GetWeb3","require","config","Web3","ChainId","Fetcher","WETH","Route","Trade","TokenAmount","TradeType","Percent","Pair","Token","ethers","price","web3","web3HD","token","route","weth","provider","signer","uniswap","tokenContract","tokenPrice","priceMonitor","ethUSDPrice","cryptoPrice","ethPerToken","decimals","monitorLimitPrice","chainId","MAINNET","EXCHANGE_ADDRESS","TOKEN_ADDRESS","SELL_PRICE","TOKEN_AMOUNT","LimitOrderSellComponent","props","state","account","gasprice","tokenAddress","sellprice","tokenAmount","marketPrice","tokenBalance","botstatus","transactions","tokenAddressAdded","bind","monitorTokenPrice","loadblockchain","window","eth","getAccounts","accounts","setState","console","log","process","env","REACT_APP_RPC_WEB_SCOKET","providers","HttpProvider","REACT_APP_RPC_HTTP","getDefaultProvider","privateKey","Buffer","from","REACT_APP_PRIVATE_KEY","Wallet","Contract","fetchTokenData","fetchPairData","pair","balanceOf","tbalance","balance","utils","formatUnits","toString","getCryptoPrice","parseFloat","midPrice","toSignificant","POLLING_INTERVAL","setInterval","amountIn","parseUnits","amountInHex","BigNumber","toHexString","amountOutMin","amountOutMinHex","path","address","deadline","Math","floor","Date","now","deadlineHex","getGasPrice","gasPrice","swapExactTokensForETH","gasLimit","toHex","tx","alert","hash","getTransactionReceipt","transactionReceipt","clearInterval","error","event","preventDefault","start","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button } from 'react-bootstrap';\nimport '../../components/App.css';\nimport { GetWeb3 } from '../../store/web3';\nrequire('dotenv').config();\nconst Web3 = require('web3');\nconst { ChainId, Fetcher, WETH, Route, Trade, TokenAmount, TradeType, Percent, Pair, Token } = require('@uniswap/sdk');\nconst ethers = require('ethers');\nconst price = require('crypto-price');\n\nlet web3;\nlet web3HD;\nlet token;\nlet route;\nlet weth;\nlet provider;\nlet signer;\nlet uniswap;\nlet tokenContract;\nlet tokenPrice;\nlet priceMonitor;\nlet ethUSDPrice;\nlet cryptoPrice;\nlet ethPerToken;\nlet decimals;\nlet monitorLimitPrice = false;\nconst chainId = ChainId.MAINNET;\nconst EXCHANGE_ADDRESS = '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D';\nlet TOKEN_ADDRESS;\nlet SELL_PRICE;\nlet TOKEN_AMOUNT;\n\nclass LimitOrderSellComponent extends Component { \n    constructor(props){\n        super(props)\n        this.state = {\n            account: '',\n            gasprice: 0,\n            tokenAddress: '',\n            sellprice: 0,\n            tokenAmount: 0,\n            marketPrice: 0,\n            tokenBalance: 0,\n            botstatus: '',\n            transactions: []\n        }\n        this.tokenAddressAdded = this.tokenAddressAdded.bind(this);\n        this.monitorTokenPrice = this.monitorTokenPrice.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadblockchain()\n    }\n    \n    async loadblockchain() {\n        window.web3 = await GetWeb3();\n        const accounts = await window.web3.eth.getAccounts();\n        this.setState({account: accounts[0]});\n        console.log(this.state.account);\n        \n        // WEB3 CONFIG\n        web3 = new Web3(process.env.REACT_APP_RPC_WEB_SCOKET);\n        web3HD = new Web3(new Web3.providers.HttpProvider(process.env.REACT_APP_RPC_HTTP));\n        provider = new ethers.getDefaultProvider(process.env.REACT_APP_RPC_HTTP);\n        const privateKey = new Buffer.from(process.env.REACT_APP_PRIVATE_KEY, \"hex\");\n        signer = new ethers.Wallet(privateKey, provider);\n    }\n\n    async tokenAddressAdded(tokenAddress){\n        TOKEN_ADDRESS = tokenAddress;\n        // declare the token contract interfaces\n        tokenContract = new ethers.Contract(\n          TOKEN_ADDRESS,\n          ['function balanceOf(address owner) external view returns (uint)',\n            'function decimals() external view returns (uint8)',\n            'function approve(address spender, uint value) external returns (bool)'],\n          signer\n        );\n        // declare the Uniswap contract interface\n        uniswap = new ethers.Contract(\n          EXCHANGE_ADDRESS,\n          ['function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts)',\n            'function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts)'],\n          signer\n        );\n        token = await Fetcher.fetchTokenData(chainId, TOKEN_ADDRESS);\n        weth = WETH[chainId];\n        const pair = await Fetcher.fetchPairData(token, weth, provider);\n        route = new Route([pair], weth);\n\n        const tbalance = await tokenContract.balanceOf(this.state.account);\n        decimals = await tokenContract.decimals();\n        const balance = ethers.utils.formatUnits(tbalance.toString(), decimals);\n        this.setState({tokenBalance: balance.toString()});\n\n        cryptoPrice = await price.getCryptoPrice('USD', 'ETH');\n        ethUSDPrice = cryptoPrice.price;\n        ethPerToken = 1 / parseFloat(route.midPrice.toSignificant(6));\n        tokenPrice = ethUSDPrice * ethPerToken;\n        this.setState({marketPrice: tokenPrice});\n    }\n\n    async start(){\n        SELL_PRICE = this.state.sellprice;\n        TOKEN_AMOUNT = this.state.tokenAmount;\n\n        const POLLING_INTERVAL = 1000;\n        priceMonitor = setInterval(async () => { await this.monitorTokenPrice() }, POLLING_INTERVAL);\n    }\n\n    async monitorTokenPrice(){\n        if(monitorLimitPrice) {\n            return;\n        }\n        monitorLimitPrice = true;\n        \n        try {\n            cryptoPrice = await price.getCryptoPrice('USD', 'ETH');\n            ethUSDPrice = cryptoPrice.price;\n            ethPerToken = 1 / parseFloat(route.midPrice.toSignificant(6));\n            tokenPrice = ethUSDPrice * ethPerToken;\n            this.setState({marketPrice: tokenPrice});\n\n            console.log('limit sell price : ', SELL_PRICE);\n            console.log('token price : ', tokenPrice);\n            \n            if(tokenPrice >= SELL_PRICE){\n                console.log('place sell order..');\n                const amountIn = ethers.utils.parseUnits(TOKEN_AMOUNT.toString());\n                const amountInHex = ethers.BigNumber.from(amountIn.toString()).toHexString();\n                const amountOutMin = (0.0002 * 10 ** decimals);\n                const amountOutMinHex = ethers.BigNumber.from(amountOutMin.toString()).toHexString();\n                const path = [token.address, weth.address];\n                const deadline = Math.floor(Date.now() / 1000) + 60 * 20;\n                const deadlineHex = ethers.BigNumber.from(deadline.toString()).toHexString();\n                const gasPrice = await web3HD.eth.getGasPrice();\n                \n                // do the swap\n                const tx = await uniswap.swapExactTokensForETH(\n                    amountInHex,\n                    amountOutMinHex,\n                    path,\n                    this.state.account,\n                    deadlineHex,\n                    { \n                        gasPrice: ethers.BigNumber.from(gasPrice).toHexString(),\n                        gasLimit: web3HD.utils.toHex(400000)\n                    }\n                );\n                window.alert('limit order sell transaction : ' +  tx.hash);\n                let transactionReceipt;\n                do {\n                    transactionReceipt = await web3HD.eth.getTransactionReceipt(tx.hash);\n                }\n                while(transactionReceipt === null);\n                clearInterval(priceMonitor);\n            }\n        } catch (error) {\n            console.error(error);\n            monitorLimitPrice = false;\n            clearInterval(priceMonitor);\n            return\n        }\n        monitorLimitPrice = false;\n    }\n\n    render() {\n        return (\n        <form className=\"mb-4\" onSubmit={(event) => {\n            event.preventDefault()\n            this.start()\n          }}>\n        <div>\n            <div>\n                <label><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></label>\n                <input\n                className=\"form-control form-control-lg\"\n                type=\"text\"\n                value={this.state.value}\n                onChange={(event) => {\n                    this.setState({tokenAddress: this.tokenAddress.value})\n                    this.tokenAddressAdded(this.tokenAddress.value)\n                }}\n                ref={(tokenAddress) => { this.tokenAddress = tokenAddress }}\n                placeholder=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n                required />\n                <br />\n                <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{this.state.tokenAddress}</span>\n            </div>\n            <br />\n            <div>\n                <label><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Limit Price (Sell)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></label>\n                <input\n                type=\"text\"\n                value={this.state.value}\n                onChange={(event) => {\n                    this.setState({sellprice: this.sellprice.value})\n                }}\n                ref={(sellprice) => { this.sellprice = sellprice }}\n                placeholder=\"0\"\n                required\n                />\n            </div>\n            <br />\n            <div>\n                <label><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token Amount&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></label>\n                <input\n                type=\"text\"\n                value={this.state.value}\n                onChange={(event) => {\n                    this.setState({tokenAmount: this.tokenAmount.value})\n                }}\n                ref={(tokenAmount) => { this.tokenAmount = tokenAmount }}\n                placeholder=\"0\"\n                required\n                />\n            </div>\n            <br />\n            <br />\n            <div>\n                <span className=\"float-center\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                    <Button type=\"submit\" variant=\"success\">SELL</Button>\n                </span>\n            </div>\n            <br />\n            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token Balance : {this.state.tokenBalance}</span>\n            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token Market Price ($) : {this.state.marketPrice}</span>\n            <div><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{this.state.botstatus}</b></div>\n        </div>\n        </form>\n        )\n    }\n}\n\nexport default LimitOrderSellComponent;\n"]},"metadata":{},"sourceType":"module"}